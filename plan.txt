📦 Project: LocalDrop v1 — Modular Donation System for Chrome Extensions

🔥 Vision
LocalDrop is a plug-and-play offline donation module designed to be reused across 100+ browser extensions without touching core HTML/CSS/JS every time. It allows developers to:

Show donation QR codes, logos, and addresses.

Customize theme, names, and content from a single config file.

Avoid repetitive, manual UI changes in every extension.

This version (v1) is static + config-driven. v2 will introduce dynamic extension detection via extension-connector.js.

📁 Directory Structure (Final)

LocalDrop/
├── assets/
│   └── network-icons/
│   └── QR/
│   ├── Binance.png
│   ├── RedotPay.png
│   ├── logo.png
│   └── USDT.png
│
├── background.png                 # Optional background image for donate page
├── donate.css                     # All donation page styling
├── donate.html                    # Main donation layout (uses injected values)
├── donate.js                      # Logic to build the donation UI from config
├── config.js                      # Central file to update all donation settings
├── README.md                      # Setup & usage instructions
🧠 Project Functionality
1. Config-Driven Control
Only one file: config.js is edited to reflect:

Extension name

Theme color

List of donation methods (name, logo, QR image, address)

2. Dynamic UI Generation
JS script reads from config.js

Auto injects extension name, colors, and donation method cards into donate.html

Supports unlimited payment networks

3. Centralized Assets Folder
All payment method logos and QR codes are stored in:

assets/network-icons/

Avoids URL usage or external dependencies (100% offline)

4. Theming Support
Uses theme color (from config) for:

Button styling

Highlights

Header UI

5. Reusable Without Modification
Developer only needs to:

Drop LocalDrop/ into the extension directory

Link donate.html in their extension popup or menu

Update config.js with extension-specific info

6. Documentation for Simplicity
README.md will have:

Setup instructions

How to update names, theme, logos, QR, and links

Example config

🧩 Developer Workflow (How You Use It)
This is the step-by-step process your team will follow for all extensions.

Build your main extension.

Copy LocalDrop/ folder into the root of your extension folder.

Update only:

config.js to reflect new extension name, color, and donation details.

Optionally, replace images in assets/network-icons/ if needed.

Add a Donate button in your popup or menu that links to LocalDrop/donate.html.

That's it. No code rewrite, no UI work.

🧱 Tech Requirements
Pure HTML/CSS/JS (no frameworks)

No backend, API, or internet dependency

Works with all Chromium-based extensions

Focused on simplicity, portability, and fast integration

📘 README.md Content Plan
Your README.md should cover:

📦 What is LocalDrop

🛠️ How to install it

🎨 How to change:

Extension name

Theme color

QR images, payment logos

Payment links

🧪 How to test it locally

🚀 How to reuse it in future extensions

🚧 Versioning Plan
v1.0.0 (Now):

Static config-based donation section

Developer manually links to it from extension popup/menu

Manual image/logo changes

v2.0.0 (Future):

Introduce extension-connector.js

Auto-detect extension name, colors, popup size

One-line setup with no config edit needed

Fully dynamic content adaptation based on host extension metadata